{
  "address": "0x642D1E52cc50A8c3C5D092EF34D9727D1AC4c64B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "timeInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEntranceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpened",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "players",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNoPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimeInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ebc7388b76742510a91f37ea2daf15884f6d27e73042dd98e4a78ce0edd4079",
  "receipt": {
    "to": null,
    "from": "0x45a4EFE644f1432746D9bB324861c493799c82b0",
    "contractAddress": "0x642D1E52cc50A8c3C5D092EF34D9727D1AC4c64B",
    "transactionIndex": 43,
    "gasUsed": "1229936",
    "logsBloom": "0x
    "blockHash": "0x99801d4facfd9122af16e1d1951af9cd3fcef6f6dc97cfaabc01c27c3e14a737",
    "transactionHash": "0x8ebc7388b76742510a91f37ea2daf15884f6d27e73042dd98e4a78ce0edd4079",
    "logs": [],
    "blockNumber": 3737943,
    "cumulativeGasUsed": "6815293",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "3017",
    "500000",
    "30"
  ],
  "numDeployments": 2,
  "solcInputHash": "ca4e557b4bc68ce6e0c115937b576c37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timeInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEntranceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"players\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNoPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughEntranceFee();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpened();\\nerror Raffle__UpKeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 players,\\n    uint256 raffleState\\n);\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    // state variables\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    uint256 private s_prevTimeStamp;\\n    // ref for coordinator contract\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint256 private immutable i_timeInterval;\\n    uint256 private prevTimeStamp;\\n\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n    RaffleState private s_raffleState;\\n\\n    // lottery variables\\n    address private s_recentWinner;\\n\\n    // events\\n    event RaffleEnter(address indexed player); //name of event shud be reverse of fn in which its is used\\n    event RequestedRaffleWinner(uint256 requestId);\\n    event WinnerPicked(address indexed player);\\n\\n    // state of contract\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n        // returns 0 for OPEN and 1 for claculating\\n    }\\n\\n    constructor(\\n        address vrfCoordinatorAddress,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 timeInterval\\n    ) VRFConsumerBaseV2(vrfCoordinatorAddress) {\\n        //vrfCoordinatorAddress is the addr of contract that verifies the random no\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorAddress);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_timeInterval = timeInterval;\\n        s_prevTimeStamp = prevTimeStamp;\\n        s_raffleState = RaffleState.OPEN; // specifying raffle state is open\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpened();\\n        }\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughEntranceFee();\\n        }\\n\\n        s_players.push(payable(msg.sender));\\n\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    // function requestRandomWinner() external {\\n    //     s_raffleState = RaffleState.CALCULATING;\\n    //     uint256 requestId = i_vrfCoordinator.requestRandomWords( //reqRandomnwords is fn of i_vrfcoordinator contract and it returns a id that\\n    //         // tells who made the request and other information\\n    //         i_gasLane, // or gasLane- the max amt willing to pay(in wei) for gas\\n    //         i_subscriptionId,\\n    //         REQUEST_CONFIRMATIONS, // no of confirmations after nodes respond\\n    //         i_callbackGasLimit,\\n    //         NUM_WORDS // no of random values we want\\n    //     );\\n\\n    //     emit RequestedRaffleWinner(requestId);\\n    // }\\n\\n    //it is used when we use hardhat\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords // its arr of random we requested and we requested 1 random value\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length; // randomWords[0] may be 250000545454554955584652651544544 smtg like this long\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        // sending contract balance to winner\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n\\n        // keep track of all winners\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    // view / pure functions\\n    function viewEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool timePassed = ((block.timestamp - s_prevTimeStamp) >\\n            i_timeInterval);\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n        return (upkeepNeeded, \\\"0x0\\\"); // can we comment this out?\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        // require(upkeepNeeded, \\\"Upkeep not needed\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        // Quiz... is this redundant?\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNoPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_prevTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getTimeInterval() public view returns (uint256) {\\n        return i_timeInterval;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n}\\n\",\"keccak256\":\"0x62ab8ea3a73bd30ebe925ce30116ebe3c2f27372092f26e18f6835d1cde69be7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620018ef380380620018ef8339818101604052810190620000389190620001af565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250508061014081815250506002546001819055506000600360006101000a81548160ff021916908360018111156200012b576200012a620002b7565b5b02179055505050505050506200036d565b6000815190506200014d81620002eb565b92915050565b600081519050620001648162000305565b92915050565b6000815190506200017b816200031f565b92915050565b600081519050620001928162000339565b92915050565b600081519050620001a98162000353565b92915050565b60008060008060008060c08789031215620001cf57620001ce620002e6565b5b6000620001df89828a016200013c565b9650506020620001f289828a016200016a565b95505060406200020589828a0162000153565b94505060606200021889828a0162000198565b93505060806200022b89828a0162000181565b92505060a06200023e89828a016200016a565b9150509295509295509295565b6000620002588262000269565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f6816200024b565b81146200030257600080fd5b50565b62000310816200025f565b81146200031c57600080fd5b50565b6200032a8162000289565b81146200033657600080fd5b50565b620003448162000293565b81146200035057600080fd5b50565b6200035e81620002a3565b81146200036a57600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610140516114ff620003f060003960008181610340015261087101526000610716015260006106f3015260006106d201526000610696015260008181610368015281816104de015261091a0152600081816103b1015261040501526114ff6000f3fe6080604052600436106100dd5760003560e01c8063473f1ddc1161007f5780636e04ff0d116100595780636e04ff0d1461026b5780638d981452146102a9578063c1c244e8146102d4578063e55ae4e8146102ff576100dd565b8063473f1ddc146101ea57806353a2c19a146102155780635f1b0fd814610240576100dd565b806316203464116100bb57806316203464146101635780631fe543e31461018e5780632cfcc539146101b75780634585e33b146101c1576100dd565b806303a82712146100e257806309bc33a71461010d578063115cbaf514610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190611105565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190611105565b60405180910390f35b34801561014457600080fd5b5061014d61038c565b60405161015a91906110ea565b60405180910390f35b34801561016f57600080fd5b506101786103a3565b6040516101859190611105565b60405180910390f35b34801561019a57600080fd5b506101b560048036038101906101b09190610ede565b6103af565b005b6101bf61046f565b005b3480156101cd57600080fd5b506101e860048036038101906101e39190610dee565b6105de565b005b3480156101f657600080fd5b506101ff6107e8565b60405161020c9190611023565b60405180910390f35b34801561022157600080fd5b5061022a610812565b6040516102379190611105565b60405180910390f35b34801561024c57600080fd5b50610255610821565b6040516102629190611105565b60405180910390f35b34801561027757600080fd5b50610292600480360381019061028d9190610e3b565b61082e565b6040516102a0929190611067565b60405180910390f35b3480156102b557600080fd5b506102be610916565b6040516102cb9190611105565b60405180910390f35b3480156102e057600080fd5b506102e961093e565b6040516102f69190611105565b60405180910390f35b34801561030b57600080fd5b5061032660048036038101906103219190610e84565b610948565b6040516103339190611023565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b60008080549050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461046157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161045892919061103e565b60405180910390fd5b61046b828261098f565b5050565b60006001811115610483576104826113df565b5b600360009054906101000a900460ff1660018111156104a5576104a46113df565b5b146104dc576040517f21025eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610536576040517f4879370a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105f86040518060200160405280600081525061082e565b509050806106675747600080549050600360009054906101000a900460ff166001811115610629576106286113df565b5b6040517f3a8d608600000000000000000000000000000000000000000000000000000000815260040161065e93929190611120565b60405180910390fd5b6001600360006101000a81548160ff0219169083600181111561068d5761068c6113df565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610757959493929190611097565b602060405180830381600087803b15801561077157600080fd5b505af1158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a99190610eb1565b90507fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b816040516107da9190611105565b60405180910390a150505050565b6000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600360009054906101000a900460ff166001811115610856576108556113df565b5b6000600181111561086a576108696113df565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261089e9190611200565b119050600080600080549050119050600080471190508280156108be5750835b80156108c75750805b80156108d05750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b600080828154811061095d5761095c61140e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106109aa576109a961140e565b5b60200260200101516109bc9190611350565b905060008082815481106109d3576109d261140e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff02191690836001811115610a6757610a666113df565b5b0217905550600067ffffffffffffffff811115610a8757610a8661143d565b5b604051908082528060200260200182016040528015610ab55781602001602082028036833780820191505090505b5060009080519060200190610acb929190610bb9565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610af29061100e565b60006040518083038185875af1925050503d8060008114610b2f576040519150601f19603f3d011682016040523d82523d6000602084013e610b34565b606091505b5050905080610b6f576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c32579160200282015b82811115610c315782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bd9565b5b509050610c3f9190610c43565b5090565b5b80821115610c5c576000816000905550600101610c44565b5090565b6000610c73610c6e8461117c565b611157565b90508083825260208201905082856020860282011115610c9657610c95611476565b5b60005b85811015610cc65781610cac8882610dc4565b845260208401935060208301925050600181019050610c99565b5050509392505050565b6000610ce3610cde846111a8565b611157565b905082815260208101848484011115610cff57610cfe61147b565b5b610d0a8482856112dd565b509392505050565b600082601f830112610d2757610d26611471565b5b8135610d37848260208601610c60565b91505092915050565b60008083601f840112610d5657610d55611471565b5b8235905067ffffffffffffffff811115610d7357610d7261146c565b5b602083019150836001820283011115610d8f57610d8e611476565b5b9250929050565b600082601f830112610dab57610daa611471565b5b8135610dbb848260208601610cd0565b91505092915050565b600081359050610dd3816114b2565b92915050565b600081519050610de8816114b2565b92915050565b60008060208385031215610e0557610e04611485565b5b600083013567ffffffffffffffff811115610e2357610e22611480565b5b610e2f85828601610d40565b92509250509250929050565b600060208284031215610e5157610e50611485565b5b600082013567ffffffffffffffff811115610e6f57610e6e611480565b5b610e7b84828501610d96565b91505092915050565b600060208284031215610e9a57610e99611485565b5b6000610ea884828501610dc4565b91505092915050565b600060208284031215610ec757610ec6611485565b5b6000610ed584828501610dd9565b91505092915050565b60008060408385031215610ef557610ef4611485565b5b6000610f0385828601610dc4565b925050602083013567ffffffffffffffff811115610f2457610f23611480565b5b610f3085828601610d12565b9150509250929050565b610f4381611234565b82525050565b610f5281611246565b82525050565b610f6181611252565b82525050565b6000610f72826111d9565b610f7c81856111e4565b9350610f8c8185602086016112ec565b610f958161148a565b840191505092915050565b610fa9816112cb565b82525050565b6000610fbc6000836111f5565b9150610fc78261149b565b600082019050919050565b610fdb8161126f565b82525050565b610fea8161129d565b82525050565b610ff9816112a7565b82525050565b611008816112b7565b82525050565b600061101982610faf565b9150819050919050565b60006020820190506110386000830184610f3a565b92915050565b60006040820190506110536000830185610f3a565b6110606020830184610f3a565b9392505050565b600060408201905061107c6000830185610f49565b818103602083015261108e8184610f67565b90509392505050565b600060a0820190506110ac6000830188610f58565b6110b96020830187610fff565b6110c66040830186610fd2565b6110d36060830185610ff0565b6110e06080830184610ff0565b9695505050505050565b60006020820190506110ff6000830184610fa0565b92915050565b600060208201905061111a6000830184610fe1565b92915050565b60006060820190506111356000830186610fe1565b6111426020830185610fe1565b61114f6040830184610fe1565b949350505050565b6000611161611172565b905061116d828261131f565b919050565b6000604051905090565b600067ffffffffffffffff8211156111975761119661143d565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111c3576111c261143d565b5b6111cc8261148a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061120b8261129d565b91506112168361129d565b92508282101561122957611228611381565b5b828203905092915050565b600061123f8261127d565b9050919050565b60008115159050919050565b6000819050919050565b600081905061126a8261149e565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006112d68261125c565b9050919050565b82818337600083830152505050565b60005b8381101561130a5780820151818401526020810190506112ef565b83811115611319576000848401525b50505050565b6113288261148a565b810181811067ffffffffffffffff821117156113475761134661143d565b5b80604052505050565b600061135b8261129d565b91506113668361129d565b925082611376576113756113b0565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106114af576114ae6113df565b5b50565b6114bb8161129d565b81146114c657600080fd5b5056fea26469706673582212201d75cafb936b9816cf61b787e290b016ff7160851ab09bf84f361515266e65f464736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c8063473f1ddc1161007f5780636e04ff0d116100595780636e04ff0d1461026b5780638d981452146102a9578063c1c244e8146102d4578063e55ae4e8146102ff576100dd565b8063473f1ddc146101ea57806353a2c19a146102155780635f1b0fd814610240576100dd565b806316203464116100bb57806316203464146101635780631fe543e31461018e5780632cfcc539146101b75780634585e33b146101c1576100dd565b806303a82712146100e257806309bc33a71461010d578063115cbaf514610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190611105565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190611105565b60405180910390f35b34801561014457600080fd5b5061014d61038c565b60405161015a91906110ea565b60405180910390f35b34801561016f57600080fd5b506101786103a3565b6040516101859190611105565b60405180910390f35b34801561019a57600080fd5b506101b560048036038101906101b09190610ede565b6103af565b005b6101bf61046f565b005b3480156101cd57600080fd5b506101e860048036038101906101e39190610dee565b6105de565b005b3480156101f657600080fd5b506101ff6107e8565b60405161020c9190611023565b60405180910390f35b34801561022157600080fd5b5061022a610812565b6040516102379190611105565b60405180910390f35b34801561024c57600080fd5b50610255610821565b6040516102629190611105565b60405180910390f35b34801561027757600080fd5b50610292600480360381019061028d9190610e3b565b61082e565b6040516102a0929190611067565b60405180910390f35b3480156102b557600080fd5b506102be610916565b6040516102cb9190611105565b60405180910390f35b3480156102e057600080fd5b506102e961093e565b6040516102f69190611105565b60405180910390f35b34801561030b57600080fd5b5061032660048036038101906103219190610e84565b610948565b6040516103339190611023565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b60008080549050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461046157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161045892919061103e565b60405180910390fd5b61046b828261098f565b5050565b60006001811115610483576104826113df565b5b600360009054906101000a900460ff1660018111156104a5576104a46113df565b5b146104dc576040517f21025eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610536576040517f4879370a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105f86040518060200160405280600081525061082e565b509050806106675747600080549050600360009054906101000a900460ff166001811115610629576106286113df565b5b6040517f3a8d608600000000000000000000000000000000000000000000000000000000815260040161065e93929190611120565b60405180910390fd5b6001600360006101000a81548160ff0219169083600181111561068d5761068c6113df565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610757959493929190611097565b602060405180830381600087803b15801561077157600080fd5b505af1158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a99190610eb1565b90507fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b816040516107da9190611105565b60405180910390a150505050565b6000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600360009054906101000a900460ff166001811115610856576108556113df565b5b6000600181111561086a576108696113df565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261089e9190611200565b119050600080600080549050119050600080471190508280156108be5750835b80156108c75750805b80156108d05750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b600080828154811061095d5761095c61140e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106109aa576109a961140e565b5b60200260200101516109bc9190611350565b905060008082815481106109d3576109d261140e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff02191690836001811115610a6757610a666113df565b5b0217905550600067ffffffffffffffff811115610a8757610a8661143d565b5b604051908082528060200260200182016040528015610ab55781602001602082028036833780820191505090505b5060009080519060200190610acb929190610bb9565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610af29061100e565b60006040518083038185875af1925050503d8060008114610b2f576040519150601f19603f3d011682016040523d82523d6000602084013e610b34565b606091505b5050905080610b6f576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c32579160200282015b82811115610c315782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bd9565b5b509050610c3f9190610c43565b5090565b5b80821115610c5c576000816000905550600101610c44565b5090565b6000610c73610c6e8461117c565b611157565b90508083825260208201905082856020860282011115610c9657610c95611476565b5b60005b85811015610cc65781610cac8882610dc4565b845260208401935060208301925050600181019050610c99565b5050509392505050565b6000610ce3610cde846111a8565b611157565b905082815260208101848484011115610cff57610cfe61147b565b5b610d0a8482856112dd565b509392505050565b600082601f830112610d2757610d26611471565b5b8135610d37848260208601610c60565b91505092915050565b60008083601f840112610d5657610d55611471565b5b8235905067ffffffffffffffff811115610d7357610d7261146c565b5b602083019150836001820283011115610d8f57610d8e611476565b5b9250929050565b600082601f830112610dab57610daa611471565b5b8135610dbb848260208601610cd0565b91505092915050565b600081359050610dd3816114b2565b92915050565b600081519050610de8816114b2565b92915050565b60008060208385031215610e0557610e04611485565b5b600083013567ffffffffffffffff811115610e2357610e22611480565b5b610e2f85828601610d40565b92509250509250929050565b600060208284031215610e5157610e50611485565b5b600082013567ffffffffffffffff811115610e6f57610e6e611480565b5b610e7b84828501610d96565b91505092915050565b600060208284031215610e9a57610e99611485565b5b6000610ea884828501610dc4565b91505092915050565b600060208284031215610ec757610ec6611485565b5b6000610ed584828501610dd9565b91505092915050565b60008060408385031215610ef557610ef4611485565b5b6000610f0385828601610dc4565b925050602083013567ffffffffffffffff811115610f2457610f23611480565b5b610f3085828601610d12565b9150509250929050565b610f4381611234565b82525050565b610f5281611246565b82525050565b610f6181611252565b82525050565b6000610f72826111d9565b610f7c81856111e4565b9350610f8c8185602086016112ec565b610f958161148a565b840191505092915050565b610fa9816112cb565b82525050565b6000610fbc6000836111f5565b9150610fc78261149b565b600082019050919050565b610fdb8161126f565b82525050565b610fea8161129d565b82525050565b610ff9816112a7565b82525050565b611008816112b7565b82525050565b600061101982610faf565b9150819050919050565b60006020820190506110386000830184610f3a565b92915050565b60006040820190506110536000830185610f3a565b6110606020830184610f3a565b9392505050565b600060408201905061107c6000830185610f49565b818103602083015261108e8184610f67565b90509392505050565b600060a0820190506110ac6000830188610f58565b6110b96020830187610fff565b6110c66040830186610fd2565b6110d36060830185610ff0565b6110e06080830184610ff0565b9695505050505050565b60006020820190506110ff6000830184610fa0565b92915050565b600060208201905061111a6000830184610fe1565b92915050565b60006060820190506111356000830186610fe1565b6111426020830185610fe1565b61114f6040830184610fe1565b949350505050565b6000611161611172565b905061116d828261131f565b919050565b6000604051905090565b600067ffffffffffffffff8211156111975761119661143d565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111c3576111c261143d565b5b6111cc8261148a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061120b8261129d565b91506112168361129d565b92508282101561122957611228611381565b5b828203905092915050565b600061123f8261127d565b9050919050565b60008115159050919050565b6000819050919050565b600081905061126a8261149e565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006112d68261125c565b9050919050565b82818337600083830152505050565b60005b8381101561130a5780820151818401526020810190506112ef565b83811115611319576000848401525b50505050565b6113288261148a565b810181811067ffffffffffffffff821117156113475761134661143d565b5b80604052505050565b600061135b8261129d565b91506113668361129d565b925082611376576113756113b0565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106114af576114ae6113df565b5b50565b6114bb8161129d565b81146114c657600080fd5b5056fea26469706673582212201d75cafb936b9816cf61b787e290b016ff7160851ab09bf84f361515266e65f464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 193,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 195,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_prevTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 208,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "prevTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 217,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(RaffleState)234"
      },
      {
        "astId": 219,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)234": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}